# DSL de configuração será responsável por: diálogo, templates, processamento (resumos, estatísticas)
# Configuration for PWGAS platform

# Specify the path to your ontology file and Protégé executable
ONTOLOGY_FILE = '/home/diana-teixeira/Desktop/AGAS/ontos/typeC/C2/supernatural.ttl'
PROTEGE_PATH = '/home/diana-teixeira/Desktop/Thesis/Protege-5.6.4-linux/Protege-5.6.4/protege'

#Specify the type of ontology A, B, C1 or C2
ONTOLOGY_TYPE = 'C2'

#Specify if ontology has images that are from your own pc ('NONE' if not), if it does, please give the path to the folder you have them in
ONTOLOGY_IMAGES = '/home/diana-teixeira/Desktop/Thesis_Writing/images'

#Specify who can edit the ontology -> 'ALL', 'LOGIN' are the option
ONTOLOGY_EDIT = 'LOGIN'

#Specify the type of user for a custom experience -> pode ser subed pelo login!! (EXP/NONEXP)
USER_TYPE = 'NONEXP'

#Direct to templates you want to use
TEMPLATES = '~/Desktop/AGAS/templates/'

#Define what language you want to use: 'PT'/'EN'
LANGUAGE = 'PT'

#What you want to see in the RDF, which classes -> PLACE DOWN 'ALL' IF YOU WANT THEM ALL SHOWN
RDF_VIEW = 'ALL' 

#Specify things you'd like to see in the pages -> PLACE DOWN 'ALL' IF YOU WANT THEM ALL SHOWN -> PLACE DOWN 'STARS' IF YOU WANT TO USE STAR SYSTEM
VIEW_CLASSES = 'STARS'

#Specify specific pages you'd like to have, like about a specific individual -> PLACE DOWN 'STARS' IF YOU WANT TO USE STAR SYSTEM
SPECIFIC_PAGES = 'STARS'

#Specify which properties you'd like to 'prettify' and give them their own card
MAKE_PRETTY = ['hasStrength', 'hasWeakness']

#Specify which properties you'd like to see a list of individuals for (leave empty if you don't want any)
SEE_PROPERTIES = ['hasStrength', 'hasWeakness', 'hasSeason']

#To specify the order of the cards in the page, do 'NONE' if you don't want any priority
GIVE_PRIORITY = ['PokemonLearns','Weight','Description']

#List of sparql queries that are going to be executed as a base for this to work
BASE_QUERIES = {
    'Retrieves the first 10 triples in the dataset': '
SELECT ?subject ?predicate ?object
WHERE {
    ?subject ?predicate ?object.
    }
    LIMIT 10
    ',
    
    'Finds a string that starting with - A (case-insensitive)': '
SELECT ?name
WHERE {
  ?person :<Connection> ?name.
  FILTER regex(?name, "^A", "i")
}
    ',

    'Filter with restricting values':'
SELECT ?person
WHERE {
  ?person a :<Something>;
          :<Something> ?age.
  FILTER(?age > 18)
}
    ',

    'OPTIONAL: Include data if available':'
SELECT ?person ?email
WHERE {
  ?person a :<ClassName>.
  OPTIONAL { ?person :<Connection> ?email. }
}
    ',
    
    'Order By':'
SELECT ?person ?age
WHERE {
  ?person a :<Class>;
          :<Connection> ?age.
}
ORDER BY DESC(?age)
    ',

    'Group By and Count': '
SELECT ?class (COUNT(?instance) AS ?count)
WHERE {
  ?instance a ?class.
}
GROUP BY ?class
ORDER BY DESC(?count)
    ',

    'Finds names whether under name or givenName': '
SELECT ?name
WHERE {
  {
    ?person <http://xmlns.com/foaf/0.1/name> ?name.
  }
  UNION
  {
    ?person <http://xmlns.com/foaf/0.1/givenName> ?name.
  }
}
    ',

    'Subquery that limits sub-results, useful when combining with aggregates': '
SELECT ?person
WHERE {
  {
    SELECT ?person
    WHERE {
      ?person a :<ClassName>.
    }
    LIMIT 5
  }
}    
    ',

    'Ask query that returns true or false': '
ASK {
  ?s a :<ClassName>.
}
    ',

    'Constructs a new RDF graph from the results.': '
CONSTRUCT {
  ?person :<Something> ?age.
}
WHERE {
  ?person a :<ClassName>;
          :<Connection> ?age.
}
    ',

    'Returns RDF triples describing the resource': '
DESCRIBE :<Resource>
    ',

    'Filters results to specific individuals.': '
SELECT ?name
WHERE {
  VALUES ?person { :<Individuals> }
  ?person :<Something> ?name.
}
    '
}

# METADADOS focused variables:
#name
AGAS_NAME = 'Supernatural - TV Show'

#How to show a list 'up' or 'side'
L_DISPOSITION = 'side'

#Not to be shown -> classes + individuals + info
NOT_SHOW = ['Angels']

#Want to see information expanded - module type, like Story is
MODULES = 'NONE'

#About information
ABOUT = 'NONE'

#ontology source -> url/link of where you got it from, if made please use url from the AGAS platform
ONTOLOGY_SOURCE = 'https://127.0.0.1:5000/home'


#USER DATA for the contact page
#username
USERNAME = 'diana-teixeira'

#user email
USER_EMAIL = 'dianaf.malheiro@hotmail.com'

#user github
USER_GITHUB = 'diana-teixeira'

#user socials
USER_SOCIALS = {
  'LinkedIn': 'diana-teixeira@linkIn',
  'Instagram': 'diana@insta',
  'Portfolio': 'personal@website.com'
}


#STYLE OF PAGE -> Blog or not
#If you want it in blog format or normal pages ('BLOG'/'PAGES')
AGAS_PAGES = 'BLOG'

#If you want to put a personal background on the app, mostly common on blogs, but can be used in the normal pages too
AGAS_BACKGROUNG = '/home/diana-teixeira/Desktop/AGAS/static/images/SBackground.jpg'

